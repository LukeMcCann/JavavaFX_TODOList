<?import javafx.geometry.Insets?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>

<!--
<VBox fx:controller="com.planetdebug.bookingsystem.MainController"
      xmlns:fx="http://javafx.com/fxml" alignment="top_center">

    <Button text="Okay" />
    <Button text="Cancel" />
    <Button text="Help" />
</VBox>
-->

<!--
    HBox lays out its children horizontally in a single row, sizes its children to their preferred widths (if any).
    If there is any space left over it will stretch itself to fill additional height, if it is false it will
    resize its children to fill the excess.

    For children which cannot be resized this way the space will remain empty.

    HBox is not normally used for a top-layer window due to the simplicity of the layout. It would usually be utilised
    in a dialogue situation as the child of another layout.
-->
<!--<HBox fx:controller="com.planetdebug.bookingsystem.MainController"-->
<!--      xmlns:fx="http://javafx.com/fxml" alignment="bottom_right"-->
<!--        style="-fx-border-color: red; -fx-border-width: 3; -fx-border-style: dashed;"-->
<!--        spacing="10">-->

<!--    <padding>-->
<!--        <Insets bottom="10" right="10" />-->
<!--    </padding>-->

<!--    <Button text="Okay" prefWidth="90"/>-->
<!--    <Button text="Cancel" prefWidth="90"/>-->
<!--    <Button text="Help" prefWidth="90"/>-->
<!--</HBox>-->

<!--
    Overlapping occurs in the GridPane if you do not display each components position, as they will be set to default position
    hgap and vgap are the pixels of space between components horizontally and vertically.
-->

<!--<GridPane fx:controller="com.planetdebug.bookingsystem.MainController"-->
<!--          xmlns:fx="http://javafx.com/fxml" alignment="top_center" hgap="10" vgap="10"-->
<!--            gridLinesVisible="true">-->

<!--    &lt;!&ndash;-->
<!--        ColumnConstraints allows additional constraints, in this circumstance each column is set to 50% width.-->
<!--        The ordering of columnConstraints is important.-->
<!--     &ndash;&gt;-->
<!--    <columnConstraints>-->
<!--        <ColumnConstraints percentWidth="50.0" />-->
<!--        <ColumnConstraints percentWidth="50.0" />-->
<!--    </columnConstraints>-->

<!--    &lt;!&ndash;Adds 10 pixel gap to top&ndash;&gt;-->
<!--    <padding>-->
<!--        <Insets top="10" />-->
<!--    </padding>-->

<!--    &lt;!&ndash;Ordering does not matter, elements are created based on column/row indices&ndash;&gt;-->
<!--    <Button text="Okay" GridPane.rowIndex="0" GridPane.columnIndex="0"/>-->
<!--    <Button text="Cancel" GridPane.rowIndex="0" GridPane.columnIndex="1"/>-->
<!--    <Button text="Help" GridPane.rowIndex="1" GridPane.columnIndex="0"/>-->
<!--    <Button text="Next" GridPane.rowIndex="1" GridPane.columnIndex="1"/>-->
<!--    <Button text="Previous" GridPane.rowIndex="2" GridPane.columnIndex="0"/>-->
<!--    <Button text="Hello" GridPane.rowIndex="2" GridPane.columnIndex="1"/>-->
<!--    <Button text="Super long button name" GridPane.rowIndex="3" GridPane.columnIndex="0"-->
<!--    GridPane.columnSpan="2" GridPane.halignment="CENTER"/>-->
<!--</GridPane>-->


<!--
    BorderPane is commonly used for top-level windows, when using a borderpane you can place controls into one of
    five positions (top, bottom, left, right, center).

    BorderPane resizing behaviour is usually as we expect it to be.

    BorderPane does not support the alignment property as it would not make sense due to there being multiple
    locations within the BorderPane. As such, elements in the BorderPane are aligned by these specific locations
    by adding them as a parent of the property.

    When using BorderPanes we use nested layouts to contain other elements.
    Each position may only have one child, therefore we cannot add elements individually to positions.
 -->

<!--<BorderPane fx:controller="com.planetdebug.bookingsystem.MainController"-->
<!--            xmlns:fx="http://javafx.com/fxml">-->

<!--    &lt;!&ndash;-->
<!--        When aligning labels to the center remember they will only take up the space required for the text,-->
<!--        to center them correctly the alignment property must be used.-->

<!--        Remember the center position acquires whatever space is left over after the other positions are created.-->
<!--     &ndash;&gt;-->
<!--    <top>-->
<!--        <Label text="Top" BorderPane.alignment="CENTER"/>-->
<!--    </top>-->
<!--    <left>-->
<!--        <Label text="Left" alignment="CENTER" />-->
<!--    </left>-->
<!--    <right>-->
<!--        <Label text="Right" alignment="CENTER" />-->
<!--    </right>-->

<!--    <center>-->
<!--        <Label text="Center" alignment="CENTER" />-->
<!--    </center>-->

<!--    <bottom>-->
<!--        <HBox spacing="10" alignment="bottom_right">-->
<!--            <padding>-->
<!--                <Insets bottom="10" right="10" />-->
<!--            </padding>-->

<!--            <Button text="Okay" prefWidth="90" />-->
<!--            <Button text="Cancel" prefWidth="90" />-->
<!--            <Button text="Help" prefWidth="90" />-->
<!--        </HBox>-->
<!--    </bottom>-->
<!--</BorderPane>-->


        <!--
            FlowPane wraps its children, whilst hbox and vbox do so vertically and horizontally. Children will not be cut off
            unless the user resizes the window making it not possible to show all in flowLayout.
        -->

<FlowPane fx:controller="com.planetdebug.bookingsystem.MainController" xmlns:fx="http://javafx.com/fxml"
    orientation="HORIZONTAL">

    <Button text="Button1" />
    <Button text="Button2" />
    <Button text="Button3" />
    <Button text="Button4" />
    <Button text="Button5" />
    <Button text="Button6" />
    <Button text="Button7" />
    <Button text="Button8" />
    <Button text="Button9" />
    <Button text="Button10" />

</FlowPane>